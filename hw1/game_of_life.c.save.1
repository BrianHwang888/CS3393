#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include <string.h>
#include <sys/types.h>
#include <errno.h>

char *endptr;
char *line;

void input_check(char *input[], int param_size, int *num_rows, int *num_columns, FILE **fileptr, int *num_generations);
void read_file(FILE *fileptr);
void world_initial(char *world[], int rows, int columns, FILE *fileptr);
void render_world(char *world[]);

int main(int argc, char *argv[]){

	FILE *fp;
	int rows, columns = 12;
	int generations = 10;
	char *world;

	input_check(argv, argc, &rows, &columns, &fp, &generations);

	printf("Rows: %d\nColumns: %d\nGenerations: %d\n", rows, columns, generations);
	world = (char *)malloc(rows * columns * sizeof(char));
//	printf("Area: %d\n", rows * columns);

//	read_file(fp);
//	printf("spot 0: %c\nLen world: %ld\n", world[3], sizeof(world));
	world_initial(&world, rows, columns, fp);
//	render_world(&world);
	printf("\n");
	return 0;
}

//checks to see if inputs given are valid
void input_check(char *input[], int num_param, int *num_rows, int *num_columns, FILE **fileptr, int *num_generations){
	/*
	checks if there are any inputs and
	if default file potato.txt is found
	*/

	if(num_param == 1){
                *fileptr = fopen("potato.txt", "r");
                if(fileptr == NULL){
                        printf("Error: default file missing\n");
                        exit(1);
		}
        }
	//checks if there is an input only for rows
	if(num_param == 2){
		printf("Error: did not specifiy column length\n");
		exit(1);
	}
	//checks if input has too much information provided
	if(num_param > 5){
		printf("Error: you provided too much information for this program\n");
		exit(1);
	}
	else{
		//checks to see if input for rows and columns are positive numbers
                if(num_param >= 3){
                        if((strtol(input[1], &endptr, 10) < 0) || (strtol(input[1], &endptr, 10) == 0 && errno == 0)){
                                printf("Error: must enter a positive number for rows\n");
                                exit(1);
                        }
                        if((strtol(input[2], &endptr, 10) < 0) || (strtol(input[2], &endptr, 10) == 0 && errno == 0)){
                                printf("Error: must enter a positive number for columns\n");
                                exit(1);
                        }
			*num_rows = strtol(input[1], &endptr, 10) + 2;
			*num_columns = strtol(input[2], &endptr, 10) + 2;

                }
		//checks to see if the file provide exists 
		if(num_param >= 4){
			if((*fileptr = fopen(input[3], "r")) == NULL){
				printf("Error: file not found\n");
				exit(1);
			}
		}
		//checks to see if input for generation is a positive number
                if(num_param == 5){
                	if((strtol(input[4], &endptr, 10) < 0) || (strtol(input[4], &endptr, 10) == 0 && errno == 0)) {
                                printf("Error: must enter a positive number for generations\n");
                                exit(1);
                        }
			*num_generations = strtol(input[4], &endptr, 10);
                }
	}
}

//reads in the file stored in fileptr
void read_file(FILE *fileptr){
	char *line = NULL;
	size_t len = 0;
	ssize_t buffer;

	while ((buffer = getline(&line, &len, fileptr)) != -1) {
        	printf("Retrieved line of length %zu :\n", buffer);
        	printf("%s", line);
    	}
	free(line);
	fclose(fileptr);
}

/*
creates the world based on game of life rules 
and the current state of the world
*/
void render_world(char *world[]){

}

//initialize the world based on input file
void world_initial(char *world[], int rows, int columns, FILE *fileptr){
	char spot = fgetc(fileptr);
	int world_posit = 1;
	while(spot != EOF){
		printf("%c", spot);
		spot = fgetc(fileptr);
		world[world_posit] = spot;
		printf("%c", world[world_posit])
		world_posit++; 
	}
	printf("\n");
}
/*	int row;
	int column;
	int y;
//	int times = 0;
//	printf("Size world[]: %ld\nrow: %ld\n col: %ld\n", sizeof(world), rows, columns);
	for(row = 1; row < rows-1; row++){
		for(column = 1; column < column-1; column++){
			fscanf(fileptr, "%c", world[row * rows + column]);
			printf("%s", world[row * rows + column]);
			}
	}
	printf("pos: %c\n", *world[2]);
	while(!feof(fileptr)){
		y = fgetc(fileptr);
//		times++;
//		printf("time: %d\n", times);
		if(strcmp(&y, "\n") == 0){
			row++;
			column = 1;
		}
		else
			world[row * sizeof(world[0]) + column] = y;
		column++;
	}*/

